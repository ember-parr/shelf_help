[{"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\index.js":"1","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\App.js":"2","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\pages\\Login.js":"6","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\pages\\Register.js":"7","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\AppHeader.js":"8","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\pages\\Menu.js":"9","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\Calendar.js":"10","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\MealEntryCard.js":"11","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\MenuItemForm.js":"12"},{"size":694,"mtime":1611951174066,"results":"13","hashOfConfig":"14"},{"size":685,"mtime":1612205703654,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":865,"mtime":1612205703658,"results":"17","hashOfConfig":"14"},{"size":3089,"mtime":1611945832297,"results":"18","hashOfConfig":"14"},{"size":2442,"mtime":1611952043210,"results":"19","hashOfConfig":"14"},{"size":4416,"mtime":1611952464795,"results":"20","hashOfConfig":"14"},{"size":2681,"mtime":1612205703657,"results":"21","hashOfConfig":"14"},{"size":1227,"mtime":1612205703662,"results":"22","hashOfConfig":"14"},{"size":8354,"mtime":1612205703659,"results":"23","hashOfConfig":"14"},{"size":2684,"mtime":1612205703660,"results":"24","hashOfConfig":"14"},{"size":5014,"mtime":1612205703660,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"e8doii",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\index.js",[],["53","54"],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\App.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\pages\\Login.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\pages\\Register.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\AppHeader.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\pages\\Menu.js",["55"],"import React from \"react\";\r\nimport Calendar from \"../components/Calendar\";\r\nimport MealEntryCard from \"../components/MealEntryCard\";\r\n// import PostList from \"../components/PostList\";\r\n// import { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\n\r\n// very similar to CommentList.js file in Tabloid as far as getting the menu items individually. \r\nconst Menu = () => {\r\n  // const [menues, setMenues] = useState([]);\r\n  // const { getToken } = useContext(UserProfileContext);\r\n\r\n  //get all menu entries\r\n  // useEffect(() => {\r\n  //   getToken().then((token) =>\r\n  //     fetch(\"/api/post\", {\r\n  //       method: \"GET\",\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`,\r\n  //       },\r\n  //     })\r\n  //       .then((res) => res.json())\r\n  //       .then((menues) => {\r\n  //         setMenues(menues);\r\n  //       })\r\n  //   );\r\n  // }, []);\r\n\r\n  return (\r\n    <>\r\n    <h3>Your Menu</h3>\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-lg-1 col-md-4 col-xs-12\"></div>\r\n      <div className=\"col-lg-10 col-xs-12\">\r\n        <Calendar />\r\n      </div>\r\n      <div className=\"col-lg-1 col-xs-12\"></div>\r\n      \r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Menu;","C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\Calendar.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\MealEntryCard.js",[],"C:\\Users\\Ember\\workspace\\Shelf_Help\\Shelf_Help\\client\\src\\components\\MenuItemForm.js",["56"],"/* eslint-disable no-unused-vars */\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Form, FormGroup, Card, CardBody, Label, Input, Button, CardHeader, ButtonGroup } from \"reactstrap\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\n// basing off of CommentForm in Tabloid\r\n\r\nexport const MenuItemForm = ({ menuItemToEdit, getMenu, cancelEdit }) => {\r\n    const { getCurrentUser, getToken } = useContext(UserProfileContext); // exactly the same as Tabloid\r\n    const user = getCurrentUser(); // same as Tabloid\r\n    const [ date, setDate ] = useState(\"\");  //like 'subject' in Tabloid\r\n    const [ custom, setCustom ] = useState(false);\r\n    const [ spoonacularId, setSpoonacularId] = useState();\r\n    const [ typeId, setTypeId ] = useState();\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    const { menuId } = useParams();\r\n    const history = useHistory();\r\n\r\n    // based off of addComment in Tabloid\r\n    const addMenuItem = (menu) => {\r\n        return getToken().then((token) => {\r\n            fetch('/api/Menu', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(menu)\r\n            })\r\n        }).then(() => getMenu())\r\n    }\r\n\r\n    const updateMenu = () => {\r\n        return getToken() \r\n            .then((token) => {\r\n                return fetch(`/api/menu/${menuItemToEdit.id}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"applicaiton/json\",\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify({ id: menuItemToEdit.id, \r\n                                            date: date, \r\n                                            custom:custom, \r\n                                            spoonacular_recipeId: spoonacularId,\r\n                                            TypeId: typeId,\r\n                                            userId: user.id}),\r\n                })\r\n            }).then(() => {\r\n                cancelEdit();\r\n                getMenu();\r\n            })\r\n    }\r\n\r\n    const submit = (e) => {\r\n        const menu = {\r\n            date, \r\n            custom, \r\n            spoonacularId,\r\n            typeId\r\n        };\r\n        console.log(menu);\r\n        addMenuItem(menu)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (menuItemToEdit) {\r\n            console.log(getMenu)\r\n            return getToken().then((token) => {\r\n                fetch(`/api/menu/${menuItemToEdit.id}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}` // The token gets added to the Authorization header\r\n                    }\r\n                }).then(res => res.json())\r\n                    .then(data => {\r\n                        console.log(data)\r\n                        setDate(data.date)\r\n                        setCustom(false)\r\n                        setSpoonacularId(data.spoonacularId)\r\n                        setTypeId(data.typeId)\r\n                        setIsLoading(false)\r\n                    })\r\n\r\n            })\r\n        } else {\r\n            setIsLoading(false)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Card className=\"mt-2\">\r\n            <CardHeader>Add A New Meal to Your Menu</CardHeader>\r\n            <CardBody>\r\n                <Form onSubmit={submit}>\r\n                    <FormGroup>\r\n                        <Label for=\"date\">Date</Label>\r\n                        <Input\r\n                            id=\"date\"\r\n                            type=\"date\"\r\n                            defaultValue={date}\r\n                            onChange={(e) => setDate(e.target.value)} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"spoonacularId\"></Label>\r\n                        <Input type=\"textarea\"\r\n                            id=\"spoonacularId\"\r\n                            onChange={(e) => setSpoonacularId(e.target.value)}\r\n                            defaultValue={spoonacularId}\r\n                            placeholder=\"SpoonacularId\"\r\n                        />\r\n\r\n                    </FormGroup>\r\n                    {menuItemToEdit ? <ButtonGroup size=\"sm\">\r\n                        <Button onClick={updateMenu}>\r\n                            Save\r\n              </Button>\r\n                        <Button outline color=\"danger\" onClick={cancelEdit}>\r\n                            Cancel\r\n              </Button>\r\n                    </ButtonGroup> :\r\n\r\n                        <Button type=\"submit\" color=\"info\" size=\"sm\">\r\n                            SUBMIT\r\n            </Button>\r\n                    }\r\n                </Form>\r\n            </CardBody>\r\n        </Card>\r\n\r\n\r\n    )\r\n}",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":3,"column":8,"nodeType":"63","messageId":"64","endLine":3,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":91,"column":8,"nodeType":"67","endLine":91,"endColumn":10,"suggestions":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'MealEntryCard' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getMenu', 'getToken', and 'menuItemToEdit'. Either include them or remove the dependency array.","ArrayExpression",["71"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Update the dependencies array to be: [getMenu, getToken, menuItemToEdit]",{"range":"74","text":"75"},[3433,3435],"[getMenu, getToken, menuItemToEdit]"]